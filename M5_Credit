{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "a5cc8190",
      "metadata": {
        "id": "a5cc8190"
      },
      "source": [
        "# Module 6: CFA\n",
        "# Use Case: Credit Risk - Identifying Bad Credit Risks\n",
        "# ===========================================\n",
        "\n",
        "In this example, we aim to predict bad consumer credits, and we develop a classification model for this purpose, driven by loan and debtor attributes. We would use this model to accept or reject a customerâ€™s business.\n",
        "\n",
        "Dataset: Credit risk https://datahub.io/machine-learning/credit-g\n",
        "Dua, D. and Graff, C. (2019). UCI Machine Learning Repository [http://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 283,
      "id": "35f08271",
      "metadata": {
        "id": "35f08271"
      },
      "outputs": [],
      "source": [
        "# package for working with tabular data\n",
        "import pandas as pd \n",
        "import numpy as np\n",
        "\n",
        "# Package for charting\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns #charts\n",
        "\n",
        "# package for timing runtime\n",
        "import time\n",
        "\n",
        "# package for navigating the operating system\n",
        "import os"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "If this is running in Google Colab.... we extract the GitHub loc where the data resides...."
      ],
      "metadata": {
        "id": "sFBrITKU_6A0"
      },
      "id": "sFBrITKU_6A0"
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/danphilps/credit_use_case"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CysAAt4-AdN8",
        "outputId": "28898ea1-839b-4a44-85b7-b96c13f82e71"
      },
      "id": "CysAAt4-AdN8",
      "execution_count": 284,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'credit_use_case'...\n",
            "remote: Enumerating objects: 68, done.\u001b[K\n",
            "remote: Counting objects: 100% (68/68), done.\u001b[K\n",
            "remote: Compressing objects: 100% (64/64), done.\u001b[K\n",
            "remote: Total 68 (delta 27), reused 19 (delta 3), pack-reused 0\u001b[K\n",
            "Unpacking objects: 100% (68/68), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# We should see a \"credit_use_case\" directory....\n",
        "os.listdir()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LusHe3a2BF_t",
        "outputId": "b0d87236-5923-42bd-82cf-f88948fe0fc3"
      },
      "id": "LusHe3a2BF_t",
      "execution_count": 285,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['README.md',\n",
              " 'credit_use_case',\n",
              " '.gitattributes',\n",
              " 'Ch20_AutoML.ipynb',\n",
              " '.git',\n",
              " 'credit-g.csv',\n",
              " 'M6_Credit.ipynb']"
            ]
          },
          "metadata": {},
          "execution_count": 285
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "os.chdir('credit_use_case')"
      ],
      "metadata": {
        "id": "hhMDMb1xB0yk"
      },
      "id": "hhMDMb1xB0yk",
      "execution_count": 286,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 287,
      "id": "c26b1a44",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c26b1a44",
        "outputId": "3d0586ae-dcc5-4033-94ac-0af6d672ef2d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "It took 0.019865751266479492 seconds to load the .xlsx file.\n"
          ]
        }
      ],
      "source": [
        "loc = \"credit-g.csv\"\n",
        "start_time = time.time()\n",
        "df_raw = pd.read_csv(loc)\n",
        "print(\"It took %s seconds to load the .xlsx file.\" % (time.time() - start_time))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exploratory Data Analysis (EDA)\n",
        "\n",
        "@@@@@@@@@@@@@@@@@@@@@ Needs to be completed\n",
        "@@@@@@@@@@@@@@@@@@@@@ Needs to be completed\n",
        "@@@@@@@@@@@@@@@@@@@@@ Needs to be completed\n",
        "@@@@@@@@@@@@@@@@@@@@@ Needs to be completed"
      ],
      "metadata": {
        "id": "WgNy0fAGpI7L"
      },
      "id": "WgNy0fAGpI7L"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Bias Alert: Protected and Priviledged Groups...\n",
        "\n",
        "Loan approval is a high risk application. We need to go very carefully as a result. We need to identify any protected characteristics (ie it would be illegal to differentiate based on these) present in the dataset. \n",
        "Our use-case is a loan approval use case, ethnicity and gender are protected charcteristics where biases would be illegal. We clearly need to remove these features.\n",
        "It is also possible to identify priviledged groups and remove biases based on these characterictics. \n"
      ],
      "metadata": {
        "id": "qV1jmvnXDdEl"
      },
      "id": "qV1jmvnXDdEl"
    },
    {
      "cell_type": "code",
      "source": [
        "df_raw.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pwvlymBMFqsW",
        "outputId": "91adbcff-cd28-4505-c20e-f787da3ca40e"
      },
      "id": "pwvlymBMFqsW",
      "execution_count": 288,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['checking_status', 'duration', 'credit_history', 'purpose',\n",
              "       'credit_amount', 'savings_status', 'employment',\n",
              "       'installment_commitment', 'personal_status', 'other_parties',\n",
              "       'residence_since', 'property_magnitude', 'age', 'other_payment_plans',\n",
              "       'housing', 'existing_credits', 'job', 'num_dependents', 'own_telephone',\n",
              "       'foreign_worker', 'class'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 288
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Protected data items - 'personal_status' has a \"sex\" classifier - REMOVE!\n",
        "df = df_raw.drop(columns=['personal_status'])\n",
        "\n",
        "# Priviledged dataitems - remove all ages < 25\n",
        "df['age'] = df_raw['age'][lambda x: x >= 25]\n"
      ],
      "metadata": {
        "id": "0n2YS32BDd6N"
      },
      "id": "0n2YS32BDd6N",
      "execution_count": 289,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for biases on protected characteristics...\n",
        "df_female = df_raw[(df_raw['personal_status'].str.contains('female') == 0)]\n",
        "df_male = df_raw[(df_raw['personal_status'].str.contains('female') != 0)]\n",
        "\n",
        "# % of females \n",
        "female_good_credits = df_female[(df_female['class'] == 'good')].shape[0]\n",
        "female_good_credits_pct = female_good_credits / df_female.shape[0]\n",
        "#\n",
        "male_good_credits = df_male[(df_male['class'] == 'good')].shape[0] \n",
        "male_good_credits_pct = male_good_credits / df_male.shape[0]\n",
        "\n",
        "#  Difference in good credits for females and males...\n",
        "print('Female good credits: ' + str(format(round(female_good_credits_pct*100, 2))) + '%')\n",
        "print('Male good credits: ' + str(format(round(male_good_credits_pct*100, 2))) + '%')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NQaeBvyxMddk",
        "outputId": "a7a43b35-3aac-4190-c25a-a63219276ff7"
      },
      "id": "NQaeBvyxMddk",
      "execution_count": 290,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Female good credits: 72.32%\n",
            "Male good credits: 64.84%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There is clearly a bias in the dataset, but to expand upon this we can use a Chi2 test to examine whether the observed \"bad\" credits we see in female rows, is statistically significant to the expected difference we see in male rows.\n",
        "\n",
        "It is possible that this bias is proxied by another data item in the dataset. **We will come back to this issue later**."
      ],
      "metadata": {
        "id": "cB4L-E2-Te1u"
      },
      "id": "cB4L-E2-Te1u"
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import chi2_contingency\n",
        "\n",
        "# Examine gender bias ... Generate  confusion matrix that to examine this bias...\n",
        "df_raw['gender'] = np.where(df_raw['personal_status'].str.contains('female') == 0, 'female', 'male')\n"
      ],
      "metadata": {
        "id": "nPksuW6KKdhV"
      },
      "id": "nPksuW6KKdhV",
      "execution_count": 291,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Create a function to check for biases in a column, so as we can reuse this..."
      ],
      "metadata": {
        "id": "G2f1AM-huBGL"
      },
      "id": "G2f1AM-huBGL"
    },
    {
      "cell_type": "code",
      "source": [
        "# Function that returns a Chi2 p-value indicating the significance of \n",
        "# any oberved biases in the col/class frequency within df\n",
        "def check_for_col_bias(df: pd.DataFrame, \n",
        "                       col_to_check: str, \n",
        "                       class_to_predict: str, \n",
        "                       sig_level: float = 0.05) -> float:\n",
        "  \n",
        "  # Get col/class frequency combinations as a matrix showing frequencies...\n",
        "  freq_matrix = pd.crosstab(df[col_to_check], df[class_to_predict]) \n",
        "\n",
        "  # col values...\n",
        "  col_vals = df[col_to_check].unique()\n",
        "  class_vals = df[col_to_check].unique()\n",
        " \n",
        "\n",
        "  # Chi-square test of independence of \n",
        "  c, p, dof, expected = chi2_contingency(freq_matrix) \n",
        "\n",
        "  # Print the p-value of the Chi-square test of independence\n",
        "  # p-val less than the significance level we need? Show the details of the bias\n",
        "  if p < sig_level: \n",
        "    # Display the Chi2 p-val and a warning message\n",
        "    print('--- Bias detected in col: ' + col_to_check + ' ---')\n",
        "    print('p-val of Chi2 test: ' + str(round(p, 4)))\n",
        "  else:\n",
        "    print('No bias... p-val of Chi2 test: ' + str(round(p, 4)))\n",
        "\n",
        "  # Show the col/class results...\n",
        "  display(freq_matrix)\n",
        "\n",
        "  return p\n",
        "\n",
        "#Run the function on our data\n",
        "p_val_of_bias = check_for_col_bias(df=df_raw, col_to_check='gender', class_to_predict='class')"
      ],
      "metadata": {
        "id": "PNroENqluAXr",
        "outputId": "cc61b427-def8-46bc-9c13-70a500457614",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        }
      },
      "id": "PNroENqluAXr",
      "execution_count": 292,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Bias detected in col: gender ---\n",
            "p-val of Chi2 test: 0.0207\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "class   bad  good\n",
              "gender           \n",
              "female  191   499\n",
              "male    109   201"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5162992a-17d7-4970-a2b9-40d63fe39d03\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>class</th>\n",
              "      <th>bad</th>\n",
              "      <th>good</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>191</td>\n",
              "      <td>499</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>109</td>\n",
              "      <td>201</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5162992a-17d7-4970-a2b9-40d63fe39d03')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5162992a-17d7-4970-a2b9-40d63fe39d03 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5162992a-17d7-4970-a2b9-40d63fe39d03');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Note that we now have identified 2 classes, male and female, with males priviledged, which means we need to be fair between these two groups "
      ],
      "metadata": {
        "id": "fnCjWx6eqGHE"
      },
      "id": "fnCjWx6eqGHE"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Check for proxies of our protected characteristics\n",
        " \n",
        "We noted that there is a bias in our dataset between the protected characterisctis of gender, with male and female credits being different, and we removed this protected characteristic from the dataset to avoid this illegal bias in loan approval outcomes.\n",
        "\n",
        "Protected characteristics can be picked up (proxied) in other dataitems in more subtle ways though. For instance given that single parent households tend to disproportionately be led by a female adult, this may make 'num_dependents' a proxy for gender.\n",
        "\n",
        "It is important that we control for any possible protected biases, and one way of achieving this is to retrain our model using a mitigator, which trains by constraining the model weights to produce a balanced outcome between protected classes; male and female credits in this case.\n",
        "\n",
        "To ascertain proxies we can check the correlation of our protected feature with ther features in the dataset.\n",
        "\n",
        "Our protected features is categorical, so compare other categorical features with our protected feature we can use a Chi2 test. \n",
        "To compare  "
      ],
      "metadata": {
        "id": "tVRDgt03tG5c"
      },
      "id": "tVRDgt03tG5c"
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "_jkqcmKJt10U"
      },
      "id": "_jkqcmKJt10U"
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "IC03L-PVtNxj"
      },
      "id": "IC03L-PVtNxj",
      "execution_count": 292,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Wrangling and Preprocessing"
      ],
      "metadata": {
        "id": "BrwhvERWDe_N"
      },
      "id": "BrwhvERWDe_N"
    },
    {
      "cell_type": "markdown",
      "id": "bdd49632",
      "metadata": {
        "id": "bdd49632"
      },
      "source": [
        "Data Wrangling: As we have shown in previous chapters we need to convert categorical data into one-hot-encodings, clean characters from numeric data columns, carry out type conversions into numeric datatypes... The following cell shows the appropriate data wrangling to get our data into a good shape. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 293,
      "id": "c62115a2",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "id": "c62115a2",
        "outputId": "382ad635-78bc-4f04-dd48-4fee8057e5a6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     duration  credit_amount  installment_commitment  residence_since  age  \\\n",
              "0           6           1169                       4                4   67   \n",
              "1          48           5951                       2                2    0   \n",
              "2          12           2096                       2                3   49   \n",
              "3          42           7882                       2                4   45   \n",
              "4          24           4870                       3                4   53   \n",
              "..        ...            ...                     ...              ...  ...   \n",
              "995        12           1736                       3                4   31   \n",
              "996        30           3857                       4                4   40   \n",
              "997        12            804                       4                4   38   \n",
              "998        45           1845                       4                4    0   \n",
              "999        45           4576                       3                4   27   \n",
              "\n",
              "     existing_credits  num_dependents  foreign_worker  class  \\\n",
              "0                   2               1               1      0   \n",
              "1                   1               1               1      1   \n",
              "2                   1               2               1      0   \n",
              "3                   1               2               1      0   \n",
              "4                   2               2               1      1   \n",
              "..                ...             ...             ...    ...   \n",
              "995                 1               1               1      0   \n",
              "996                 1               1               1      0   \n",
              "997                 1               1               1      0   \n",
              "998                 1               1               1      1   \n",
              "999                 1               1               1      0   \n",
              "\n",
              "     checking_status_0<=X<200  ...  other_payment_plans_stores  \\\n",
              "0                           0  ...                           0   \n",
              "1                           1  ...                           0   \n",
              "2                           0  ...                           0   \n",
              "3                           0  ...                           0   \n",
              "4                           0  ...                           0   \n",
              "..                        ...  ...                         ...   \n",
              "995                         0  ...                           0   \n",
              "996                         0  ...                           0   \n",
              "997                         0  ...                           0   \n",
              "998                         0  ...                           0   \n",
              "999                         1  ...                           0   \n",
              "\n",
              "     housing_for free  housing_own  housing_rent  \\\n",
              "0                   0            1             0   \n",
              "1                   0            1             0   \n",
              "2                   0            1             0   \n",
              "3                   1            0             0   \n",
              "4                   1            0             0   \n",
              "..                ...          ...           ...   \n",
              "995                 0            1             0   \n",
              "996                 0            1             0   \n",
              "997                 0            1             0   \n",
              "998                 1            0             0   \n",
              "999                 0            1             0   \n",
              "\n",
              "     job_high qualif/self emp/mgmt  job_skilled  job_unemp/unskilled non res  \\\n",
              "0                                0            1                            0   \n",
              "1                                0            1                            0   \n",
              "2                                0            0                            0   \n",
              "3                                0            1                            0   \n",
              "4                                0            1                            0   \n",
              "..                             ...          ...                          ...   \n",
              "995                              0            0                            0   \n",
              "996                              1            0                            0   \n",
              "997                              0            1                            0   \n",
              "998                              0            1                            0   \n",
              "999                              0            1                            0   \n",
              "\n",
              "     job_unskilled resident  own_telephone_none  own_telephone_yes  \n",
              "0                         0                   0                  1  \n",
              "1                         0                   1                  0  \n",
              "2                         1                   1                  0  \n",
              "3                         0                   1                  0  \n",
              "4                         0                   1                  0  \n",
              "..                      ...                 ...                ...  \n",
              "995                       1                   1                  0  \n",
              "996                       0                   0                  1  \n",
              "997                       0                   1                  0  \n",
              "998                       0                   0                  1  \n",
              "999                       0                   1                  0  \n",
              "\n",
              "[1000 rows x 57 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2e18d79c-310d-4c7e-8e40-19e88c21a959\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>credit_amount</th>\n",
              "      <th>installment_commitment</th>\n",
              "      <th>residence_since</th>\n",
              "      <th>age</th>\n",
              "      <th>existing_credits</th>\n",
              "      <th>num_dependents</th>\n",
              "      <th>foreign_worker</th>\n",
              "      <th>class</th>\n",
              "      <th>checking_status_0&lt;=X&lt;200</th>\n",
              "      <th>...</th>\n",
              "      <th>other_payment_plans_stores</th>\n",
              "      <th>housing_for free</th>\n",
              "      <th>housing_own</th>\n",
              "      <th>housing_rent</th>\n",
              "      <th>job_high qualif/self emp/mgmt</th>\n",
              "      <th>job_skilled</th>\n",
              "      <th>job_unemp/unskilled non res</th>\n",
              "      <th>job_unskilled resident</th>\n",
              "      <th>own_telephone_none</th>\n",
              "      <th>own_telephone_yes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>1169</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>67</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>48</td>\n",
              "      <td>5951</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>12</td>\n",
              "      <td>2096</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>49</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>42</td>\n",
              "      <td>7882</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>45</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24</td>\n",
              "      <td>4870</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>53</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>12</td>\n",
              "      <td>1736</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>31</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>30</td>\n",
              "      <td>3857</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>40</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>12</td>\n",
              "      <td>804</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>38</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>45</td>\n",
              "      <td>1845</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>45</td>\n",
              "      <td>4576</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>27</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows Ã— 57 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2e18d79c-310d-4c7e-8e40-19e88c21a959')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2e18d79c-310d-4c7e-8e40-19e88c21a959 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2e18d79c-310d-4c7e-8e40-19e88c21a959');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 293
        }
      ],
      "source": [
        "# list categorical columns...\n",
        "cat_cols =['checking_status', 'purpose', 'credit_history', 'savings_status', 'employment', 'other_parties', 'property_magnitude', 'other_payment_plans','housing','job','own_telephone']\n",
        "\n",
        "# One hot encoding of catagorical variables...\n",
        "df[cat_cols].astype(\"category\")\n",
        "one_hot_encodings = pd.get_dummies(df[cat_cols])\n",
        "\n",
        "#Combine dfs\n",
        "df = pd.concat([df, one_hot_encodings], axis=1)\n",
        "\n",
        "#remove categorical columns...\n",
        "df = df.drop(columns=cat_cols)\n",
        "\n",
        "#Data wrangling..... get types and bad values sorted out\n",
        "\n",
        "# Remove characters in numeric columns (note that the data type was set, by the open_csv function to object, \n",
        "# so we first convert to string before running the replace function (which can only be fun on str types)\n",
        "df['foreign_worker'] = df['foreign_worker'].str.replace('yes', '1')\n",
        "df['foreign_worker'] = df['foreign_worker'].str.replace('no', '0')\n",
        "df['class'] = df['class'].str.replace('good', '0')\n",
        "df['class'] = df['class'].str.replace('bad', '1')\n",
        "\n",
        "# Convert to numerics so we can use in ML... we force type conversions, then print our resulting df.\n",
        "df['foreign_worker'] = pd.to_numeric(df['foreign_worker'], errors ='coerce').fillna(0).astype('int')\n",
        "df['class'] = pd.to_numeric(df['class'], errors ='coerce').fillna(0).astype('int')\n",
        "df['duration'] = pd.to_numeric(df['duration'], errors ='coerce').fillna(0).astype('int')\n",
        "df['installment_commitment'] = pd.to_numeric(df['installment_commitment'], errors ='coerce').fillna(0).astype('int')\n",
        "df['residence_since'] = pd.to_numeric(df['residence_since'], errors ='coerce').fillna(0).astype('int')\n",
        "df['age'] = pd.to_numeric(df['age'], errors ='coerce').fillna(0).astype('int')\n",
        "df['num_dependents'] = pd.to_numeric(df['num_dependents'], errors ='coerce').fillna(0).astype('int')\n",
        "\n",
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "jCs33N2k8iVd"
      },
      "id": "jCs33N2k8iVd"
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wljCC_8z_jL2",
        "outputId": "588c1b4f-cfac-4289-80c1-edec73521709"
      },
      "id": "wljCC_8z_jL2",
      "execution_count": 294,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['duration', 'credit_amount', 'installment_commitment',\n",
              "       'residence_since', 'age', 'existing_credits', 'num_dependents',\n",
              "       'foreign_worker', 'class', 'checking_status_0<=X<200',\n",
              "       'checking_status_<0', 'checking_status_>=200',\n",
              "       'checking_status_no checking', 'purpose_business',\n",
              "       'purpose_domestic appliance', 'purpose_education',\n",
              "       'purpose_furniture/equipment', 'purpose_new car', 'purpose_other',\n",
              "       'purpose_radio/tv', 'purpose_repairs', 'purpose_retraining',\n",
              "       'purpose_used car', 'credit_history_all paid',\n",
              "       'credit_history_critical/other existing credit',\n",
              "       'credit_history_delayed previously', 'credit_history_existing paid',\n",
              "       'credit_history_no credits/all paid', 'savings_status_100<=X<500',\n",
              "       'savings_status_500<=X<1000', 'savings_status_<100',\n",
              "       'savings_status_>=1000', 'savings_status_no known savings',\n",
              "       'employment_1<=X<4', 'employment_4<=X<7', 'employment_<1',\n",
              "       'employment_>=7', 'employment_unemployed', 'other_parties_co applicant',\n",
              "       'other_parties_guarantor', 'other_parties_none',\n",
              "       'property_magnitude_car', 'property_magnitude_life insurance',\n",
              "       'property_magnitude_no known property',\n",
              "       'property_magnitude_real estate', 'other_payment_plans_bank',\n",
              "       'other_payment_plans_none', 'other_payment_plans_stores',\n",
              "       'housing_for free', 'housing_own', 'housing_rent',\n",
              "       'job_high qualif/self emp/mgmt', 'job_skilled',\n",
              "       'job_unemp/unskilled non res', 'job_unskilled resident',\n",
              "       'own_telephone_none', 'own_telephone_yes'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 294
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1fd02130",
      "metadata": {
        "id": "1fd02130"
      },
      "source": [
        "## Bias Alert: Imbalanced dataset\n",
        "\n",
        "Imbalances in datasets for classification problems are a big issue. We generally need to balance the dataset to contain an equal proportion of the different classes before training (and testing). For the credit use-case, we have two classes {1,0}, meaning that ideally 50% of our samples should be class=1; and 50% class=0. If this is not the case and we have an imbalance (we do), we can balance the data by up-sampling the minority class, or down-sampling the majority class.\n",
        "Let us first examine the dataset to determine whether it is in balance."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 295,
      "id": "9d772e1c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "9d772e1c",
        "outputId": "c3429c88-9eac-48d2-99b7-fa372b21beea"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imbalanced dataset....\n",
            "0    700\n",
            "1    300\n",
            "Name: class, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "#Pie chart of imbalances wrapped as a func as we will use it a few times..\n",
        "def pie_of_imbalance(df: pd.DataFrame, class_col: str = 'class'):\n",
        "    print('Imbalanced dataset....')\n",
        "    print(df[class_col].value_counts())\n",
        "    df.groupby(class_col).size().plot(kind='pie', y = 'class', label = \"Type\",  autopct='%1.1f%%')\n",
        "    \n",
        "#run func\n",
        "pie_of_imbalance(df)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e0459bd5",
      "metadata": {
        "id": "e0459bd5"
      },
      "source": [
        "The dataset is not balanced. 70% of samples are class=0; only 30% are class=1. We should bring this into balance before we train our model, or risk introducing dangerous biases into our forecasts."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e286323c",
      "metadata": {
        "id": "e286323c"
      },
      "source": [
        "#### NB: Separate training and testing datasets BEFORE balancing the dataset\n",
        "\n",
        "Before we start up or down-sampling to correct the imbalance, we first we need to create our testing and training datasets. We can then balance the training set. This is to keep the training-set in-sample and the testing-set strictly out-of-sample. This is crucial as our learner must not see any of the test samples until we actually test it for performance. If we fail to separate testing and training data before up samplng, we can suffer data-snooping biases (also called data-leakage), which would invalidate our model."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "eTjDqiD5f_j1"
      },
      "id": "eTjDqiD5f_j1",
      "execution_count": 296,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 297,
      "id": "f9517124",
      "metadata": {
        "id": "f9517124"
      },
      "outputs": [],
      "source": [
        "# Define X and y variables\n",
        "cols  = list(df.columns)\n",
        "cols.remove('class')\n",
        "\n",
        "# Contains only numerics\n",
        "X = df[cols]\n",
        "y = df['class']\n",
        "\n",
        "#Test and train set    \n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=None)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d3f79ba0",
      "metadata": {
        "id": "d3f79ba0"
      },
      "source": [
        "### Predicting Good and Bad Credits: A Clasification Problem\n",
        "We will use the RandomForest classifier to help us predict good and bad credits. We will also use this learner to examine the erformance of different up and down sampling approaches to deal with the imbalanced dataset. We will be able to see the relative performance of each balancing approach on our problem.\n",
        "\n",
        "First let us run the classifier on the imbalanced data and examine the F1 score that results when we test the model. (It is a very poor result)."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c02db5bb",
      "metadata": {
        "id": "c02db5bb"
      },
      "source": [
        "Get the sklearn packages we will need for our clasification problem"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 298,
      "id": "af12e96b",
      "metadata": {
        "id": "af12e96b"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Classifiers\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# metrics...\n",
        "from sklearn.metrics import f1_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import recall_score\n",
        "from sklearn.metrics import confusion_matrix"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c7484849",
      "metadata": {
        "id": "c7484849"
      },
      "source": [
        "We can wrap our classification solution in a single function, which will train the Random Forest classifier, and print its performance metrics. We can call this function using traing data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 299,
      "id": "c09b7144",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "c09b7144",
        "outputId": "16436b8a-426b-46db-8077-3cff0fa423d7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'sklearn.ensemble._forest.RandomForestClassifier'>\n",
            "Accuracy train: 0.8129, test:  0.7100\n",
            "Precision train: 0.7964, test:  0.7046\n",
            "Recall train: 0.9900, test:  0.9802\n",
            "F1 train: 0.5371, test:  0.2564\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Declare a function to wrap training of a classifier and printing of performance data\n",
        "def run_rf_classification_model(X_train: pd.DataFrame, X_test: pd.DataFrame, \n",
        "                            y_train: pd.DataFrame, y_test: pd.DataFrame) -> object:\n",
        "    \n",
        "    # Scale and transform the data for training\n",
        "    sclr = StandardScaler()\n",
        "    sclr.fit(X_train) # scale to 0 mean and std dev 1 on training data\n",
        "\n",
        "    X_train = sclr.fit_transform(X_train) # scale both sets:\n",
        "    X_test = sclr.fit_transform(X_test)\n",
        "\n",
        "    # classifier train\n",
        "    rf = RandomForestClassifier(max_depth=5,random_state=0)\n",
        "    rf.fit(X_train,y_train)\n",
        "    y_train_hat = rf.predict(X_train)\n",
        "    y_test_hat = rf.predict(X_test)\n",
        "\n",
        "    # Print score\n",
        "    print(type(rf))        \n",
        "    print(f\"Accuracy train: {rf.score(X_train,y_train):.4f}, test: \",\n",
        "      f\"{rf.score(X_test,y_test):.4f}\")\n",
        "    print(f\"Precision train: {precision_score(y_train, y_train_hat, average=None)[0]:.4f}, test: \",\n",
        "      f\"{precision_score(y_test,y_test_hat, average=None)[0]:.4f}\")\n",
        "    print(f\"Recall train: {recall_score(y_train, y_train_hat, average=None)[0]:.4f}, test: \",\n",
        "      f\"{recall_score(y_test,y_test_hat, average=None)[0]:.4f}\")\n",
        "    print(f\"F1 train: {f1_score(y_train, y_train_hat, average=None)[1]:.4f}, test: \",\n",
        "      f\"{f1_score(y_test,y_test_hat, average=None)[1]:.4f}\")\n",
        "    #print(f1_score(y_test, y_test_hat, average=None))\n",
        "\n",
        "\n",
        "    #Print confusion matrix...\n",
        "    cf_matrix = confusion_matrix(y_test, y_test_hat, labels=[0, 1]) \n",
        "    cf_matrix_norm = cf_matrix.astype('float') # / cf_matrix.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "    ax = sns.heatmap(cf_matrix_norm, annot=True, cmap='Blues', fmt='g')\n",
        "    ax.set_title('Confusion Matrix\\n\\n');\n",
        "    ax.set_xlabel('\\nPredicted Values')\n",
        "    ax.set_ylabel('Actual Values ');\n",
        "    plt.show()\n",
        "\n",
        "    return rf\n",
        "\n",
        "#run RF classifier function\n",
        "model = run_rf_classification_model(X_train, X_test, y_train, y_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "66bfe3c2",
      "metadata": {
        "id": "66bfe3c2"
      },
      "source": [
        "## Test the performance of different up, and down sampling approaches"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f8166fcf",
      "metadata": {
        "id": "f8166fcf"
      },
      "source": [
        "### 1) Upsampling using resampling"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a4ef22f5",
      "metadata": {
        "id": "a4ef22f5"
      },
      "source": [
        "First we test up-sampling using sklearn's resample, and examine how well it does using the RandomForest classifier. Resampling can up-sample by simply randomly selecting and copying existing observations of the minority class. We can balance the classes in this way."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 300,
      "id": "739e0d7d",
      "metadata": {
        "id": "739e0d7d"
      },
      "outputs": [],
      "source": [
        "from sklearn.utils import resample\n",
        "\n",
        "#Split first to avoid data-snooping\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=None)\n",
        "\n",
        "# Create up-sampled data set for minority class\n",
        "# note that n_samples= the number of samples the imbalance represents.\n",
        "X_upsampled, y_upsampled = resample(X_train[y_train == 1],\n",
        "                                        y_train[y_train == 1],\n",
        "                                        replace=True,\n",
        "                                        n_samples=(X_train[y_train == 0].shape[0]-X_train[y_train == 1].shape[0]),\n",
        "                                        random_state=None)\n",
        "\n",
        "#Combine train with upsampled\n",
        "X_upsampled = X_train.append(X_upsampled)\n",
        "y_upsampled = y_train.append(y_upsampled)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fc1e5726",
      "metadata": {
        "id": "fc1e5726"
      },
      "source": [
        "Let us check everything is in balance now"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 301,
      "id": "b8cb61d7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "b8cb61d7",
        "outputId": "9c8bddf5-f16e-4c0c-cede-5fad4d5ef398"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imbalanced dataset....\n",
            "0    481\n",
            "1    481\n",
            "Name: class, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#get pie of the current imbalance\n",
        "temp = pd.concat([X_upsampled, y_upsampled], axis=1)\n",
        "pie_of_imbalance(temp)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "53dea8e1",
      "metadata": {
        "id": "53dea8e1"
      },
      "source": [
        "Dataset is perfectly in balance... Now train our classifier..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 302,
      "id": "5caebbb0",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "5caebbb0",
        "outputId": "c52358f0-b9d2-4f33-c376-c0257fcaf25c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'sklearn.ensemble._forest.RandomForestClassifier'>\n",
            "Accuracy train: 0.8368, test:  0.7100\n",
            "Precision train: 0.8665, test:  0.8793\n",
            "Recall train: 0.7963, test:  0.6986\n",
            "F1 train: 0.8432, test:  0.5797\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#Run our function....\n",
        "model = run_rf_classification_model(X_upsampled, X_test, y_upsampled, y_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1b4afcc1",
      "metadata": {
        "id": "1b4afcc1"
      },
      "source": [
        "The F1 score on the test data has increased markedly."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2) Down-sampling - Removing rows to balance the classes"
      ],
      "metadata": {
        "id": "jdP4x1pnJRBr"
      },
      "id": "jdP4x1pnJRBr"
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now we can test down-sampling, which is simply removing samples from the majority class. "
      ],
      "metadata": {
        "id": "Nys4tUAkJWbZ"
      },
      "id": "Nys4tUAkJWbZ"
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.under_sampling import RandomUnderSampler \n",
        "\n",
        "#Split first to avoid data-snooping\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=None)\n",
        "\n",
        "# Randomly downsample rows in the majority class\n",
        "rus = RandomUnderSampler(random_state=42)\n",
        "X_downsampled, y_downsampled = rus.fit_resample(X_train, y_train)"
      ],
      "metadata": {
        "id": "nK5nBBahJcJ5"
      },
      "id": "nK5nBBahJcJ5",
      "execution_count": 303,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#get pie of the current imbalance\n",
        "temp = pd.concat([X_upsampled_smote, y_upsampled_smote], axis=1)\n",
        "pie_of_imbalance(temp)"
      ],
      "metadata": {
        "id": "55keCxgwJcny",
        "outputId": "4d92d1a3-085b-441c-ac08-7d555b40bf9c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        }
      },
      "id": "55keCxgwJcny",
      "execution_count": 304,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imbalanced dataset....\n",
            "1    487\n",
            "0    487\n",
            "Name: class, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dataset is perfectly in balance... Now train our classifier..."
      ],
      "metadata": {
        "id": "ZnUv-k-hJkIT"
      },
      "id": "ZnUv-k-hJkIT"
    },
    {
      "cell_type": "code",
      "source": [
        "#Run our function....\n",
        "model = run_rf_classification_model(X_downsampled, X_test, y_downsampled, y_test)"
      ],
      "metadata": {
        "id": "7tI2EWKDJkZa",
        "outputId": "6899dd81-bd33-4234-d841-ff052727963a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "id": "7tI2EWKDJkZa",
      "execution_count": 305,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'sklearn.ensemble._forest.RandomForestClassifier'>\n",
            "Accuracy train: 0.8311, test:  0.6767\n",
            "Precision train: 0.8693, test:  0.9085\n",
            "Recall train: 0.7793, test:  0.6261\n",
            "F1 train: 0.8394, test:  0.5689\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e98b384e",
      "metadata": {
        "id": "e98b384e"
      },
      "source": [
        "### 3) Up-sampling using a synthetic over sampling approach called SMOTE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "235505f6",
      "metadata": {
        "id": "235505f6"
      },
      "source": [
        "Add the libraries we will need... and generate the synthetic data to balance our classes using SMOTE."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 306,
      "id": "5dadf40d",
      "metadata": {
        "id": "5dadf40d"
      },
      "outputs": [],
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "#How many samples do we need to balance?\n",
        "idx = np.random.choice(X_train.shape[0], size=X_train[y_train == 0].shape[0]-X_train[y_train == 1].shape[0], replace=False)\n",
        "\n",
        "# Generate SMOTE samples and use this to train\n",
        "upsampler_smote = SMOTE()\n",
        "X_upsampled_smote, y_upsampled_smote = upsampler_smote.fit_resample(X=X_train, y=y_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4a14d264",
      "metadata": {
        "id": "4a14d264"
      },
      "source": [
        "Before we use the up-sampled dataset to train our classifier, let us first examine the distribution of the synthetic datapoints that SMOTE creates"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 307,
      "id": "4ff54d69",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 411
        },
        "id": "4ff54d69",
        "outputId": "c984651d-5100-43a9-f1d1-e852f5899235"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "from matplotlib import pyplot as plt\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "\n",
        "\n",
        "fig = plt.figure(figsize=(10, 7)) \n",
        "ax = fig.add_subplot(111, projection='3d')\n",
        "\n",
        "ax.scatter(X_train['credit_amount'],X_train['age'], X_train['duration'], marker=\"o\", s=10, c='blue', label='Real datapoints')\n",
        "ax.scatter(X_upsampled_smote['credit_amount'],X_upsampled_smote['age'], X_upsampled_smote['duration'], marker=\"+\", s=50, c='red', label='SMOTE datapoints')\n",
        "\n",
        "# set axes range\n",
        "plt.xlim(-500, 11000)\n",
        "plt.ylim(0, 60)\n",
        "\n",
        "ax.set_xlabel('credit_amount')\n",
        "ax.set_ylabel('age')\n",
        "ax.set_zlabel('duration')\n",
        "\n",
        "plt.title('How SMOTE Samples are Distributed vs Real Data Points')\n",
        "plt.legend(loc=1,framealpha=1, fontsize=8)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a875103b",
      "metadata": {
        "id": "a875103b"
      },
      "source": [
        "The synthetic datapoints look realistic at a glance."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 308,
      "id": "c031433f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "c031433f",
        "outputId": "bf114360-fed4-4f8f-d6de-b967cfd004ac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imbalanced dataset....\n",
            "1    478\n",
            "0    478\n",
            "Name: class, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#get pie of the current imbalance\n",
        "temp = pd.concat([X_upsampled_smote, y_upsampled_smote], axis=1)\n",
        "pie_of_imbalance(temp)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "89d8fdc6",
      "metadata": {
        "id": "89d8fdc6"
      },
      "source": [
        "After up-sampling using SMOTE's synthetic data, the dataset is perfectly in balance... however we have a Fairness problem. Can you spot what it is?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 309,
      "id": "750a6983",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "750a6983",
        "outputId": "fecd2fa1-d87a-4509-d5bf-dc17be1c88a3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'sklearn.ensemble._forest.RandomForestClassifier'>\n",
            "Accuracy train: 0.8546, test:  0.7300\n",
            "Precision train: 0.8915, test:  0.8579\n",
            "Recall train: 0.8075, test:  0.7613\n",
            "F1 train: 0.8611, test:  0.5525\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#Run our function....\n",
        "model_biased = run_rf_classification_model(X_upsampled_smote, X_test, y_upsampled_smote, y_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "As we can see, all up and down sampling approaches have outperformed the F1 Score on the imbalanced data. The most impressive performance in this case is from up-sampling using SMOTE synthetic data."
      ],
      "metadata": {
        "id": "-Jq5iGciL-MT"
      },
      "id": "-Jq5iGciL-MT"
    },
    {
      "cell_type": "markdown",
      "id": "30066c4b",
      "metadata": {
        "id": "30066c4b"
      },
      "source": [
        "### Synthetic Data's Fairness Banana Skin - Data Leakage of protected characteristics\n",
        "\n",
        "Remember that we had two distinct groups we need to ensure fairness for, females and males? We just: generated synthetic data based off the entire dataset though - using both male and female samples - and in doing so we polluted the new rows we created with both male and female data characteristics. \n",
        "We therefore need to generate synthetic data for male rows and THEN generate synthetic data for female rows avoiding data leakage of protected characteristics."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "# Generate SMOTE samples and use this to train... do for each protected class \n",
        "# separately and THEN combine.\n",
        "upsampler_smote = SMOTE()\n",
        "\n",
        "#** First add back the gender column as after the train_test_split we want to know which row is which.\n",
        "#\n",
        "X_gender = pd.concat([X, df_raw['gender']], axis=1)\n",
        "y_gender = pd.concat([y, df_raw['gender']], axis=1)\n",
        "\n",
        "#Split first to avoid data-snooping\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_gender, y_gender, test_size=0.3, random_state=None)\n",
        "\n",
        "# SEPARATE SMOTE BY GENDER TO PREVENT DATA LEAKAGE: \n",
        "# FIRST we generate synthetic samples for females, where all these synthetic \n",
        "# samples will be exclusively generated from female instances.\n",
        "X_train_female = X_train[(X_train['gender'] == 'female')]\n",
        "X_train_female = X_train_female.drop(['gender'], axis=1)\n",
        "#\n",
        "y_train_female = y_train[(y_train['gender'] == 'female')]\n",
        "y_train_female = y_train_female.drop(['gender'], axis=1)\n",
        "\n",
        "X_upsampled_smote_female, y_upsampled_smote_female = upsampler_smote.fit_resample(X=X_train_female, y=y_train_female)\n",
        "\n",
        "# SECOND males...\n",
        "# samples will be exclusively generated from male instances.\n",
        "X_train_male = X_train[(X_train['gender'] == 'male')]\n",
        "X_train_male = X_train_male.drop(['gender'], axis=1)\n",
        "#\n",
        "y_train_male = y_train[(y_train['gender'] == 'male')]\n",
        "y_train_male = y_train_male.drop(['gender'], axis=1)\n",
        "\n",
        "X_upsampled_smote_male, y_upsampled_smote_male = upsampler_smote.fit_resample(X=X_train_male, y=y_train_male)"
      ],
      "metadata": {
        "id": "TTAnktvT73Ql"
      },
      "id": "TTAnktvT73Ql",
      "execution_count": 310,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Combine the male and female upsampled data..."
      ],
      "metadata": {
        "id": "ByQ3478C7nXx"
      },
      "id": "ByQ3478C7nXx"
    },
    {
      "cell_type": "code",
      "source": [
        "X_upsampled_smote = pd.concat([X_upsampled_smote_female, X_upsampled_smote_male], axis=0)\n",
        "y_upsampled_smote = pd.concat([y_upsampled_smote_female, y_upsampled_smote_male], axis=0)"
      ],
      "metadata": {
        "id": "vNHwc1QP7wCb"
      },
      "id": "vNHwc1QP7wCb",
      "execution_count": 311,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#get pie of the current imbalance\n",
        "temp = pd.concat([X_upsampled_smote, y_upsampled_smote], axis=1)\n",
        "pie_of_imbalance(temp)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "GuXSRiAd7n95",
        "outputId": "ea923aa6-0c88-4b38-c0b6-a0ddfbb9f5c8"
      },
      "id": "GuXSRiAd7n95",
      "execution_count": 312,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Imbalanced dataset....\n",
            "0    481\n",
            "1    481\n",
            "Name: class, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We have two options to remove bias... \n",
        "1) we can train two models, one for males and then females making sure the same proportion recieves a loan approval\n",
        "2) we can train one model and make sure females and males recieve the same proportion of approvals."
      ],
      "metadata": {
        "id": "3EDJm3jjImjZ"
      },
      "id": "3EDJm3jjImjZ"
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove gender col from test sets\n",
        "X_test_no_gender = X_test.drop(['gender'], axis=1)\n",
        "y_test_no_gender = y_test.drop(['gender'], axis=1)\n",
        "\n",
        "#Run our function....\n",
        "fair_model = run_rf_classification_model(X_upsampled_smote, X_test_no_gender, y_upsampled_smote, y_test_no_gender)"
      ],
      "metadata": {
        "id": "W2KbVZNlIjuR",
        "outputId": "ff7d5dc2-5f1d-41e7-95e4-2b8612d6958f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        }
      },
      "id": "W2KbVZNlIjuR",
      "execution_count": 313,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:14: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'sklearn.ensemble._forest.RandomForestClassifier'>\n",
            "Accuracy train: 0.8628, test:  0.7000\n",
            "Precision train: 0.8975, test:  0.8377\n",
            "Recall train: 0.8191, test:  0.7306\n",
            "F1 train: 0.8685, test:  0.5263\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5e6ea491",
      "metadata": {
        "id": "5e6ea491"
      },
      "source": [
        "We can see that separating males and females in the SMOTE process has not had a material impact on the F1 score.\n",
        "\n",
        "Now we need to determine the fair cut offs for loan approval..."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Examine the predictions for bias...\n",
        "fair_model.fit(X_upsampled_smote,y_upsampled_smote)\n",
        "y_test_hat = pd.DataFrame(fair_model.predict(X_test_no_gender))\n",
        "\n",
        "df = pd.concat([y_test_hat, y_test['gender']], axis=1, ignore_index=True)\n",
        "df.columns = ['class', 'gender']\n",
        "\n",
        "#Run the function on our data\n",
        "p_val_of_bias = check_for_col_bias(df=df, col_to_check='gender', class_to_predict='class')"
      ],
      "metadata": {
        "id": "ZJvPg5ktyDl7",
        "outputId": "5058d369-cf90-4dc3-abf1-915280a4ce02",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        }
      },
      "id": "ZJvPg5ktyDl7",
      "execution_count": 314,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No bias... p-val of Chi2 test: 0.4741\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "class   0.0  1.0\n",
              "gender          \n",
              "female   46   14\n",
              "male     18    9"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-33a4fe9d-2955-4fbd-9d14-0ad58ca810fa\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>class</th>\n",
              "      <th>0.0</th>\n",
              "      <th>1.0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>46</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>18</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33a4fe9d-2955-4fbd-9d14-0ad58ca810fa')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-33a4fe9d-2955-4fbd-9d14-0ad58ca810fa button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-33a4fe9d-2955-4fbd-9d14-0ad58ca810fa');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model_biased.fit(X_upsampled_smote,y_upsampled_smote)\n",
        "y_test_hat = pd.DataFrame(model_biased.predict(X_test_no_gender))\n",
        "\n",
        "df = pd.concat([y_test_hat, y_test['gender']], axis=1)\n",
        "df.columns = ['class', 'gender']\n",
        "\n",
        "#Run the function on our data\n",
        "p_val_of_bias = check_for_col_bias(df=df, col_to_check='gender', class_to_predict='class')"
      ],
      "metadata": {
        "id": "iX6oKYbd7-G8",
        "outputId": "54d1daba-a4f2-4940-dbc2-ea1d453e0d0e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 215
        }
      },
      "id": "iX6oKYbd7-G8",
      "execution_count": 270,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "No bias... p-val of Chi2 test: 0.968\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "class   0.0  1.0\n",
              "gender          \n",
              "female   44   24\n",
              "male     15    7"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ec6fb11-213a-45c7-8c8c-c66e2130421d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>class</th>\n",
              "      <th>0.0</th>\n",
              "      <th>1.0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>44</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>15</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ec6fb11-213a-45c7-8c8c-c66e2130421d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7ec6fb11-213a-45c7-8c8c-c66e2130421d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7ec6fb11-213a-45c7-8c8c-c66e2130421d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#pd.concat([y_test_hat, y_test['gender']], axis=1, ignore_index=True).shape\n",
        "#y_test.reset_index()\n",
        "#y_test_hat.reset_index()\n",
        "\n",
        "ss = pd.Series(y_test_hat.iloc[0].astype('str'))\n",
        "\n",
        "s = pd.Series(y_test['gender'])\n",
        "#ss = pd.Series(y_test_hat.iloc[0])\n",
        "pd.concat([ss, s], axis=1, ignore_index=True)\n",
        "#[y_test_hat, np.array(y_test['gender'])]"
      ],
      "metadata": {
        "id": "LvnrvQLW87h8",
        "outputId": "2f6ac911-901d-4e91-cc93-bea2a8f8df40",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "id": "LvnrvQLW87h8",
      "execution_count": 337,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       0       1\n",
              "0      0  female\n",
              "3    NaN  female\n",
              "7    NaN  female\n",
              "8    NaN  female\n",
              "9    NaN  female\n",
              "..   ...     ...\n",
              "980  NaN  female\n",
              "991  NaN  female\n",
              "994  NaN  female\n",
              "995  NaN    male\n",
              "998  NaN  female\n",
              "\n",
              "[300 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c2ec05b4-603d-42e2-af56-b570438b56c6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>980</th>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>991</th>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>994</th>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>NaN</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>NaN</td>\n",
              "      <td>female</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>300 rows Ã— 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2ec05b4-603d-42e2-af56-b570438b56c6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c2ec05b4-603d-42e2-af56-b570438b56c6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c2ec05b4-603d-42e2-af56-b570438b56c6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 337
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test_hat"
      ],
      "metadata": {
        "id": "UugpIJv4_nF9",
        "outputId": "d53a176d-d713-482d-c945-9c5a6cba5f30",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "id": "UugpIJv4_nF9",
      "execution_count": 333,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     0\n",
              "0    0\n",
              "1    0\n",
              "2    0\n",
              "3    0\n",
              "4    0\n",
              "..  ..\n",
              "295  0\n",
              "296  0\n",
              "297  0\n",
              "298  1\n",
              "299  1\n",
              "\n",
              "[300 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c26b01fd-0e5b-4edc-8166-f35ded6b9566\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>295</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>297</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>298</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>299</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>300 rows Ã— 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c26b01fd-0e5b-4edc-8166-f35ded6b9566')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c26b01fd-0e5b-4edc-8166-f35ded6b9566 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c26b01fd-0e5b-4edc-8166-f35ded6b9566');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 333
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Classifiers\n",
        "from sklearn.ensemble import RandomForestRegressor"
      ],
      "metadata": {
        "id": "oHZunzoS3KlM"
      },
      "id": "oHZunzoS3KlM",
      "execution_count": 175,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Declare a function to wrap training of a regression based classifier so as we \n",
        "# can generate a probability score that can be ranked... \n",
        "def run_rf_classification_model_prob(X_train: pd.DataFrame, X_test: pd.DataFrame, \n",
        "                            y_train: pd.DataFrame, y_test: pd.DataFrame) -> [object, float]:\n",
        "    # Scale and transform the data for training\n",
        "    sclr = StandardScaler()\n",
        "    sclr.fit(X_train) # scale to 0 mean and std dev 1 on training data\n",
        "\n",
        "    X_train = sclr.fit_transform(X_train) # scale both sets:\n",
        "    X_test = sclr.fit_transform(X_test)\n",
        "\n",
        "    # classifier train\n",
        "    rf = RandomForestRegressor(max_depth=5,random_state=0)\n",
        "    rf.fit(X_train,y_train)\n",
        "    y_train_hat = rf.predict(X_train)\n",
        "    y_test_hat = rf.predict(X_test)\n",
        "\n",
        "    # Print score\n",
        "    print(type(rf))        \n",
        "    print(f\"Accuracy train: {rf.score(X_train,y_train):.4f}, test: \",\n",
        "      f\"{rf.score(X_test,y_test):.4f}\")\n",
        "    print(f\"Precision train: {precision_score(y_train, y_train_hat, average=None)[0]:.4f}, test: \",\n",
        "      f\"{precision_score(y_test,y_test_hat, average=None)[0]:.4f}\")\n",
        "    print(f\"Recall train: {recall_score(y_train, y_train_hat, average=None)[0]:.4f}, test: \",\n",
        "      f\"{recall_score(y_test,y_test_hat, average=None)[0]:.4f}\")\n",
        "    print(f\"F1 train: {f1_score(y_train, y_train_hat, average=None)[1]:.4f}, test: \",\n",
        "      f\"{f1_score(y_test,y_test_hat, average=None)[1]:.4f}\")\n",
        "    #print(f1_score(y_test, y_test_hat, average=None))\n",
        "\n",
        "\n",
        "    #Print confusion matrix...\n",
        "    cf_matrix = confusion_matrix(y_test, y_test_hat, labels=[0, 1]) \n",
        "    cf_matrix_norm = cf_matrix.astype('float') # / cf_matrix.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "    ax = sns.heatmap(cf_matrix_norm, annot=True, cmap='Blues', fmt='g')\n",
        "    ax.set_title('Confusion Matrix\\n\\n');\n",
        "    ax.set_xlabel('\\nPredicted Values')\n",
        "    ax.set_ylabel('Actual Values ');\n",
        "    plt.show()\n",
        "\n",
        "    return rf\n",
        "\n",
        "#run RF classifier function X_upsampled_smote, X_test_no_gender, y_upsampled_smote, y_test_no_gender\n",
        "run_rf_classification_model_prob(X_train=X_upsampled_smote, X_test=X_test_no_gender, y_train=y_upsampled_smote, y_test=y_test_no_gender)"
      ],
      "metadata": {
        "id": "9D1IIMaJdivj",
        "outputId": "e263c1f8-b175-4135-b16d-14d5ac6a659c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        }
      },
      "id": "9D1IIMaJdivj",
      "execution_count": 156,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'sklearn.ensemble._forest.RandomForestRegressor'>\n",
            "Accuracy train: 0.6170, test:  0.3052\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-156-7936b22a09c2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m \u001b[0;31m#run RF classifier function X_upsampled_smote, X_test_no_gender, y_upsampled_smote, y_test_no_gender\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m \u001b[0mrun_rf_classification_model_prob\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX_upsampled_smote\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX_test_no_gender\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_upsampled_smote\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_test_no_gender\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-156-7936b22a09c2>\u001b[0m in \u001b[0;36mrun_rf_classification_model_prob\u001b[0;34m(X_train, X_test, y_train, y_test)\u001b[0m\n\u001b[1;32m     20\u001b[0m     print(f\"Accuracy train: {rf.score(X_train,y_train):.4f}, test: \",\n\u001b[1;32m     21\u001b[0m       f\"{rf.score(X_test,y_test):.4f}\")\n\u001b[0;32m---> 22\u001b[0;31m     print(f\"Precision train: {precision_score(y_train, y_train_hat, average=None)[0]:.4f}, test: \",\n\u001b[0m\u001b[1;32m     23\u001b[0m       f\"{precision_score(y_test,y_test_hat, average=None)[0]:.4f}\")\n\u001b[1;32m     24\u001b[0m     print(f\"Recall train: {recall_score(y_train, y_train_hat, average=None)[0]:.4f}, test: \",\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36mprecision_score\u001b[0;34m(y_true, y_pred, labels, pos_label, average, sample_weight, zero_division)\u001b[0m\n\u001b[1;32m   1763\u001b[0m         \u001b[0mwarn_for\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"precision\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1764\u001b[0m         \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1765\u001b[0;31m         \u001b[0mzero_division\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mzero_division\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1766\u001b[0m     )\n\u001b[1;32m   1767\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36mprecision_recall_fscore_support\u001b[0;34m(y_true, y_pred, beta, labels, pos_label, average, warn_for, sample_weight, zero_division)\u001b[0m\n\u001b[1;32m   1542\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mbeta\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"beta should be >=0 in the F-beta score\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1544\u001b[0;31m     \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_set_wise_labels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maverage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpos_label\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1545\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1546\u001b[0m     \u001b[0;31m# Calculate tp_sum, pred_sum, true_sum ###\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_set_wise_labels\u001b[0;34m(y_true, y_pred, average, labels, pos_label)\u001b[0m\n\u001b[1;32m   1346\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"average has to be one of \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maverage_options\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1348\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1349\u001b[0m     \u001b[0;31m# Convert to Python primitive type to avoid NumPy type / Python str\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1350\u001b[0m     \u001b[0;31m# comparison. See https://github.com/numpy/numpy/issues/6784\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     93\u001b[0m         raise ValueError(\n\u001b[1;32m     94\u001b[0m             \"Classification metrics can't handle a mix of {0} and {1} targets\".format(\n\u001b[0;32m---> 95\u001b[0;31m                 \u001b[0mtype_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype_pred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m             )\n\u001b[1;32m     97\u001b[0m         )\n",
            "\u001b[0;31mValueError\u001b[0m: Classification metrics can't handle a mix of binary and continuous targets"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train=X_upsampled_smote\n",
        "X_test=X_test_no_gender\n",
        "y_train=y_upsampled_smote\n",
        "y_test=y_test_no_gender\n",
        "\n",
        "# Scale and transform the data for training\n",
        "sclr = StandardScaler()\n",
        "sclr.fit(X_train) # scale to 0 mean and std dev 1 on training data\n",
        "\n",
        "X_train = sclr.fit_transform(X_train) # scale both sets:\n",
        "X_test = sclr.fit_transform(X_test)\n",
        "\n",
        "# classifier train\n",
        "rf = RandomForestRegressor(max_depth=5,random_state=0)\n",
        "rf.fit(X_train,y_train)\n",
        "y_train_hat = rf.predict(X_train)\n",
        "y_test_hat = rf.predict(X_test)\n",
        "\n",
        "#pd.concat([pd.DataFrame(y_test_hat), pd.DataFrame(X_test)], axis=1)\n",
        "y_test_hat_bin = y_test_hat > 0.51\n",
        "y_test_hat_bin.sum()"
      ],
      "metadata": {
        "id": "6cc8bVIE3dgK",
        "outputId": "3f1c16e2-4d0f-4ddf-cb94-850a08db9c7d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "6cc8bVIE3dgK",
      "execution_count": 247,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:15: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  from ipykernel import kernelapp as app\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "114"
            ]
          },
          "metadata": {},
          "execution_count": 247
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test_hat_bin.shape"
      ],
      "metadata": {
        "id": "cM4Oez_j80As",
        "outputId": "ff9771dc-dbd8-493c-c8ab-dfeb0c9978b4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "cM4Oez_j80As",
      "execution_count": 248,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(300,)"
            ]
          },
          "metadata": {},
          "execution_count": 248
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Print score\n",
        "print(type(rf))        \n",
        "print(f\"Accuracy train: {rf.score(X_train,y_train):.4f}, test: \",\n",
        "  f\"{rf.score(X_test,y_test):.4f}\")\n",
        "print(f\"Precision train: {precision_score(y_train, y_train_hat, average=None)[0]:.4f}, test: \",\n",
        "  f\"{precision_score(y_test,y_test_hat, average=None)[0]:.4f}\")\n",
        "print(f\"Recall train: {recall_score(y_train, y_train_hat, average=None)[0]:.4f}, test: \",\n",
        "  f\"{recall_score(y_test,y_test_hat, average=None)[0]:.4f}\")\n",
        "print(f\"F1 train: {f1_score(y_train, y_train_hat, average=None)[1]:.4f}, test: \",\n",
        "  f\"{f1_score(y_test,y_test_hat, average=None)[1]:.4f}\")\n",
        "#print(f1_score(y_test, y_test_hat, average=None))\n",
        "\n",
        "\n",
        "#Print confusion matrix...\n",
        "cf_matrix = confusion_matrix(y_test, y_test_hat, labels=[0, 1]) \n",
        "cf_matrix_norm = cf_matrix.astype('float') # / cf_matrix.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "ax = sns.heatmap(cf_matrix_norm, annot=True, cmap='Blues', fmt='g')\n",
        "ax.set_title('Confusion Matrix\\n\\n');\n",
        "ax.set_xlabel('\\nPredicted Values')\n",
        "ax.set_ylabel('Actual Values ');\n",
        "plt.show()\n",
        "\n",
        "return rf\n",
        "\n"
      ],
      "metadata": {
        "id": "D1E5jCfDMMta"
      },
      "id": "D1E5jCfDMMta",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ---END---\n",
        "\n",
        "Fairlearn stuff below..."
      ],
      "metadata": {
        "id": "A_aSmXeVo_8i"
      },
      "id": "A_aSmXeVo_8i"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Finally we check for Protected Characteristics and their Proxies...\n",
        "\n",
        "We noted at the outset that there was a bias between the protected characterisctis of gender, with male and female credits being different, and we removed this protected characteristic from the dataset to avoid this illegal bias in loan approval outcomes.\n",
        "\n",
        "Protected characteristics can be picked up (proxied) in other dataitems in more subtle ways though. For instance given that single parent households tend to disproportionately be led by a female adult, this may make 'num_dependents' a proxy for gender.\n",
        "\n",
        "It is important that we control for any possible protected biases, and one way of achieving this is to retrain our model using a mitigator, which trains by constraining the model weights to produce a balanced outcome between protected classes; male and female credits in this case."
      ],
      "metadata": {
        "id": "LvIWjJXQtAVd"
      },
      "id": "LvIWjJXQtAVd"
    },
    {
      "cell_type": "code",
      "source": [
        "from fairlearn.metrics import MetricFrame\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Run classifier, in sample\n",
        "y_pred = model.predict(X_test_exgender)\n",
        "\n",
        "# Analyze metrics using MetricFrame\n",
        "metric_frame = MetricFrame(metrics=accuracy_score, y_true=y_test, y_pred=y_pred, sensitive_features=X_test['gender'])\n",
        "metric_frame.by_group.plot.bar(\n",
        "    subplots=True,\n",
        "    layout=[3, 3],\n",
        "    legend=False,\n",
        "    figsize=[12, 8],\n",
        "    title=\"Show all metrics\",\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "apn7X0tIfYXe",
        "outputId": "580d9ef7-6f32-4cdb-fc52-03cef5bac7ec"
      },
      "id": "apn7X0tIfYXe",
      "execution_count": 473,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:444: UserWarning: X has feature names, but RandomForestClassifier was fitted without feature names\n",
            "  f\"X has feature names, but {self.__class__.__name__} was fitted without\"\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f36495525d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3649756510>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3649635610>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f364a639810>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f36481dd850>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3649599c50>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f364a2a7210>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f36490a8150>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f36490a8850>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 473
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 9 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The balance almost equal, this indicates that our model is tending to show now bias based non gender, which indicates that removing the protected dataitem in thefirst place has had a balancing effect on the outcomes. \n",
        "\n",
        "However, we can still explicuitly remove correlated features, and constrain model training to remove bias."
      ],
      "metadata": {
        "id": "6efw9jQlqDse"
      },
      "id": "6efw9jQlqDse"
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Removing features correlated with protected characteristics"
      ],
      "metadata": {
        "id": "wfSaSlGfw66d"
      },
      "id": "wfSaSlGfw66d"
    },
    {
      "cell_type": "code",
      "source": [
        "from fairlearn.reductions import ExponentiatedGradient, DemographicParity\n",
        "from fairlearn.preprocessing import CorrelationRemover\n",
        "from fairlearn.metrics import MetricFrame"
      ],
      "metadata": {
        "id": "7nuZPQqodXFd"
      },
      "id": "7nuZPQqodXFd",
      "execution_count": 474,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# List all the columns that are sensitive, supply in a list...\n",
        "cr = CorrelationRemover(sensitive_feature_ids=['gender'])\n",
        "cr.fit(X_upsampled_smote)\n",
        "X_upsampled_smote_cr = cr.transform(X_upsampled_smote)"
      ],
      "metadata": {
        "id": "JaBH-jZFsAlV"
      },
      "id": "JaBH-jZFsAlV",
      "execution_count": 478,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# We set the balance in the population so we do not under or over-represent males or females...\n",
        "constraint = DemographicParity(ratio_bound=0.5)\n",
        "\n",
        "mitigator = ExponentiatedGradient(model, constraint)\n",
        "mitigator.fit(X_upsampled_smote_cr, y_train, sensitive_features=['gender'])\n",
        "y_pred_mitigated = mitigator.predict(X_test_exgender)\n",
        "\n",
        "sr_mitigated = MetricFrame(metrics=accuracy_score, y_true=y_test, y_pred=y_pred_mitigated, sensitive_features=X_upsampled_smote['gender'])\n",
        "print(sr_mitigated.overall)\n",
        "print(sr_mitigated.by_group)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "id": "lHoBhbgGNWx-",
        "outputId": "b1e8acb8-7524-4543-a9f1-fa55acf3d355"
      },
      "id": "lHoBhbgGNWx-",
      "execution_count": 479,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-479-f637d020a068>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mmitigator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mExponentiatedGradient\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconstraint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mmitigator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_upsampled_smote_cr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msensitive_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'gender'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0my_pred_mitigated\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmitigator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_exgender\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fairlearn/reductions/_exponentiated_gradient/exponentiated_gradient.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, **kwargs)\u001b[0m\n\u001b[1;32m     89\u001b[0m                                  \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconstraints\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m                                  \u001b[0msample_weight_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msample_weight_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m                                  **kwargs)\n\u001b[0m\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0mtheta\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlagrangian\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconstraints\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fairlearn/reductions/_exponentiated_gradient/_lagrangian.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, X, y, estimator, constraints, B, opt_lambda, sample_weight_name, **kwargs)\u001b[0m\n\u001b[1;32m     47\u001b[0m                  sample_weight_name='sample_weight', **kwargs):\n\u001b[1;32m     48\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconstraints\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconstraints\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 49\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconstraints\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     50\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconstraints\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdefault_objective\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fairlearn/reductions/_moments/utility_parity.py\u001b[0m in \u001b[0;36mload_data\u001b[0;34m(self, X, y, sensitive_features, control_features)\u001b[0m\n\u001b[1;32m    309\u001b[0m                                          \u001b[0menforce_binary_labels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                                          \u001b[0msensitive_features\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msensitive_features\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 311\u001b[0;31m                                          control_features=control_features)\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0mbase_event\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSeries\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_ALL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/fairlearn/utils/_input_validation.py\u001b[0m in \u001b[0;36m_validate_and_reformat_input\u001b[0;34m(X, y, expect_y, enforce_binary_labels, **kwargs)\u001b[0m\n\u001b[1;32m     70\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'numeric'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0menforce_binary_labels\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missubset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m    979\u001b[0m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmulti_output\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my_numeric\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    980\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 981\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    982\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    983\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    332\u001b[0m         raise ValueError(\n\u001b[1;32m    333\u001b[0m             \u001b[0;34m\"Found input variables with inconsistent numbers of samples: %r\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m             \u001b[0;34m%\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m         )\n\u001b[1;32m    336\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [970, 700]"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let us inspect the results between the \"fair\" model outcomes and the potentially biased...."
      ],
      "metadata": {
        "id": "cVV8YHYuwfRU"
      },
      "id": "cVV8YHYuwfRU"
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#Print confusion matrix...\n",
        "cf_matrix = confusion_matrix(y, y_pred_mitigated, labels=[0, 1]) \n",
        "cf_matrix_norm = cf_matrix.astype('float') # / cf_matrix.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "ax = sns.heatmap(cf_matrix_norm, annot=True, cmap='Reds', fmt='g')\n",
        "ax.set_title('Confusion Matrix Bias Mitigated\\n\\n');\n",
        "ax.set_xlabel('\\nPredicted Values')\n",
        "ax.set_ylabel('Actual Values ');\n",
        "plt.show()\n",
        "\n",
        "print(f\"F1 full dataset: {f1_score(y, y_pred_mitigated, average=None)[1]:.4f}\")\n",
        "  \n",
        "# Analyze metrics using MetricFrame\n",
        "metric_frame = MetricFrame(metrics=accuracy_score, y_true=y, y_pred=y_pred_mitigated, sensitive_features=df_raw['gender'])\n",
        "metric_frame.by_group.plot.bar(\n",
        "    subplots=True,\n",
        "    layout=[3, 3],\n",
        "    legend=False,\n",
        "    figsize=[12, 8],\n",
        "    title=\"Show all metrics\",\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 783
        },
        "id": "CW7SaIErqgQ1",
        "outputId": "f43b41f8-1d67-4f1c-85b1-4e1d6bf78d66"
      },
      "id": "CW7SaIErqgQ1",
      "execution_count": 463,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "F1 full dataset: 1.0000\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f3647fc4450>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647c25b90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647d64590>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f3648b4ba90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3648d91f90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f36485f14d0>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f36486774d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647c69850>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647c69890>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 463
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Print confusion matrix... for the unmitigated classifer...\n",
        "cf_matrix = confusion_matrix(y, y_pred, labels=[0, 1]) \n",
        "cf_matrix_norm = cf_matrix.astype('float') # / cf_matrix.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "ax = sns.heatmap(cf_matrix_norm, annot=True, cmap='Blues', fmt='g')\n",
        "ax.set_title('Confusion Matrix Non-Mitigated\\n\\n');\n",
        "ax.set_xlabel('\\nPredicted Values')\n",
        "ax.set_ylabel('Actual Values ');\n",
        "plt.show()\n",
        "\n",
        "print(f\"F1 full dataset: {f1_score(y, y_pred, average=None)[1]:.4f}\")\n",
        "\n",
        "\n",
        "# Analyze metrics using MetricFrame\n",
        "metric_frame = MetricFrame(metrics=accuracy_score, y_true=y, y_pred=y_pred, sensitive_features=df_raw['gender'])\n",
        "metric_frame.by_group.plot.bar(\n",
        "    subplots=True,\n",
        "    layout=[3, 3],\n",
        "    legend=False,\n",
        "    figsize=[12, 8],\n",
        "    title=\"Show all metrics\",\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 783
        },
        "id": "fyHNuQeXqt12",
        "outputId": "f7478398-cf11-480d-a3f7-da765f408a27"
      },
      "id": "fyHNuQeXqt12",
      "execution_count": 464,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "F1 full dataset: 0.5660\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f36486e52d0>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647ed3c90>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647e16110>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f3647dcc610>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647bc3b10>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647bfafd0>],\n",
              "       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f3648aa7590>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647ff9810>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7f3647ff9d10>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 464
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x576 with 9 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZoAAAD/CAYAAADISBA+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAVxUlEQVR4nO3de7RdZX3u8e/DXQVRDxEFEoKAcCKiYkStVq14FDgKdYgXvFVKRT1loFU7isdWGVrq5Vi1PVoPqD2iHEXEilFRvKOCaAKNaEJTw82AqJFrFLn6O3/MGVzZ7GvYb9Zeyfczxh5Z853vmvM39x5jPXnnfNecqSokSWplq2EXIEnavBk0kqSmDBpJUlMGjSSpKYNGktSUQSNJasqgkbTZSvKKJN8bdh3rJXlakqsHlq9M8oxh1jQoyZeT/Nlsb9egkTTSkjw5yQVJbkpyfZLzkzxu2HXNJUlOSnL6VP2q6rCqOm2297/NbG9QkjaVJPcHvgi8BjgT2A74Y+C2YdY1apIESFX9vsX2HdFIGmUPB6iqT1XVXVX1u6r6alVdMtgpyXuS3JDkiiSHDbTvlmRJPxJaneSVffsOSX6XZJd++c1J7uyDjSRvT/L+8QpKckySS5OsS3J5kldtzIEl+ViSf+lPZ/2mH6k9JMn7+2P5jySPGXMsn02ytj/OE/r2Q4H/Cbyw386P+vZvJzk5yfnALcDD+ra/GNjmKweOZWWSg/r2v0lyTd++Kskhkx2LQSNplP0ncFeS05IcluSB4/R5PLAK2AV4N/DR/n/wAGcAVwO7AUcB/5Dk6VV1K7AUeGrf76nAVcCTBpbPm6CmXwHPBu4PHAO8b/0H9EZ4AfC3fe23Ad8HLu6XzwLeC5BkK+ALwI+A3YFDgNcleVZVfQX4B+DTVbVjVT1qYPsvA44DduqP725Jng+cBLy8P5YjgOuS7AccDzyuqnYCngVcOdlBGDSSRlZV3Qw8GSjgw8DafoSy60C3q6rqw1V1F3Aa8FBg1yTz6YLjb6rq1qpaDnyE7oMVuiB5apJtgAOBf+6XdwAeB3xngpq+VFWXVec84Kt0p/M2xueq6qI++D4H3FpVH++P5dPA+hHN44B5VfW2qrq9qi7vfx8vmmL7H6uqFVV1Z1XdMWbdXwDvrqql/bGsrqqrgLuA7YFFSbatqiur6rLJdmLQSBppVXVpVb2iqvYADqAbnQye1vrFQN9b+pc79v2ur6p1A32vohsRQBc0TwMOAn4MfI1uJPMEYHVVXTdePf3I6sL+dNyNwOF0I5CN8cuB178bZ3nH/vWewG5Jblz/Q3e6bDBwx7NmknXzgXsESFWtBl5HN9r5VZIzkuw22U4MGkmbjar6D+BjdIEzlZ8DD0qy00DbAuCa/vUFwH7Ac4Hzqmplv/5wJjhtlmR74LPAe4Bdq+oBwDlAxus/i9YAV1TVAwZ+dqqqw/v1E92mf7Lb968B9h73TVWfrKon0wVcAe+arDiDRtLISrJ/kjck2aNfng8cDVw41Xurag1dmLyjv/h/IHAscHq//hbgIuAv+UOwXAC8momvz2xHd1ppLXBnP/HgmRt5eDPxQ2Bdf5H+Pkm2TnLAwDTvXwIL+2s50/UR4I1JHpvOPkn2TLJfkqf3oXor3chq0tlqBo2kUbaO7mL/D5L8li5gfgK8YZrvPxpYSDe6+Rzw1qr6+sD684Bt6T7I1y/vxMTXZ9YBJ9BNtb4BeDGwZPqHs3H6azbPBh4NXAH8mi4odu67fKb/97okF09zm58BTgY+Sfd7Pht4EF2QvrPfxy+ABwNvmmxb8cFnkqSWHNFIkpoyaCRJTRk0kqSmDBpJUlMGjSSpKYNGktSUQSNJasqgkSQ1ZdBIkpoyaCRJTRk0kqSmDBpJUlMGjSSpKYNGktSUQSNJasqgkSQ1ZdBIkpoyaCRJTRk0kqSmDBpJUlMGjSSpKYNGktSUQSNJasqgkSQ1ZdBIkpoyaCRJTRk0kqSmDBpJUlMGjSSpKYNGktSUQSNJasqgkSQ1ZdBIkpoyaDYT6WxWf88k2wy7Bkn33mb1wTQXJDkxyWVJ1iVZmeS5A+temeTSgXUH9e3zk/xbkrVJrkvygb79pCSnD7x/YZJa/wGc5NtJTk5yPnAL8LAkxwzs4/IkrxpT35FJlie5ua/z0CTPT3LRmH6vT/L5KY718P441iW5JskbJ9tP375bkiVJrk+yOskrB95zUpKzkpye5GbgFUl2TvLRJNf2+/j7JFvP+A8jaWj8H+Psuwz4Y+AXwPOB05PsAzwZOAn4U2AZsDdwR/+h+UXgm8DLgLuAxTPY38uAw4BVQID9gGcDlwNPAb6cZGlVXZzkYODjwFHAN4CHAjsBVwCnJPmvVXXpwHb/fop9fxR4QVV9N8kDgb0AJtkPwBnAT4DdgP2BryW5rKq+2a8/sv+9vRzYHvgk8CtgH+B+/e9qDXDKDH5HkoYoVTXsGjZrSZYDbwX+B3BOVf3TmPVPBJYAD62qO8esOwnYp6pe2i8vpAuFbavqziTfBr5TVW+ZZP9nA9+qqn9KcgpwS1X91Tj9PgRcX1VvTvII4HvAQ6rqtkm2/TPgZOBTVXXzQPu4+0kyH7gSeEBVrevb3tEf+yv64316VT2lX7cr8LO+/+/6tqOB46rqTyaqS9Lc4qmzWZbk5f0poxuT3AgcAOwCzKcb7Yw1H7hqbMjMwJox+z8syYX9qakbgcP7/a/f13g1AJwGvDhJ6EYzZ04WMr3n9du/Ksl5fWhOtp/d6MJs3UDbVcDuExzPnsC2wLUDv89TgAdPUZekOcRTZ7MoyZ7Ah4FDgO9X1V39iCZ0H6B7j/O2NcCCJNuMEza/Be47sPyQcd5/95A0yfbAZ+lOO32+qu7oRzQZ2Nd4NVBVFya5ne6034v7n0lV1VLgyCTbAscDZ9KFzET7+TnwoCQ7DYTNAuCa8Y6n385twC73IoglDZkjmtl1P7oPyrUASY6hG9EAfAR4Y5LH9jPE9umD6YfAtcA7k9wvyQ5JntS/ZznwlCQLkuwMvGmK/W9Hd11jLXBnksOAZw6s/yhwTJJDkmyVZPck+w+s/zjwAeCOqvreZDtKsl2SlyTZuaruAG4Gfj/ZfqpqDXAB8I7+OA8EjgVOH28fVXUt8FXgH5Pcv9/W3kmeOsXvQdIcYtDMoqpaCfwj8H3gl8AjgfP7dZ+hu57xSWAdcDbwoKq6C3gO3cXunwFXAy/s3/M14NPAJcBFdBfCJ9v/OuAEupHFDXSjkiUD638IHAO8D7gJOI/u9NR6n6ALxnE/+MfxMuDKfobYq4GXTGM/RwML6UY3nwPeWlVfn2QfL6cL0JX9MZ1FN7lA0ohwMoDuluQ+dDO8Dqqqnw67HkmbB0c0GvQaYKkhI2k2ORlAACS5km7SwJ+OaV/BhqfX1ntVVf2/TVCapBHnqTNJUlOeOpMkNTW0U2e77LJLLVy4cFi7l+aciy666NdVNW/YdUizbWhBs3DhQpYtWzas3UtzTpKrhl2D1IKnziRJTRk0kqSmDBpJUlPTCpr+4Vir+gdVnThBnxf0D8FakeSTs1umJGlUTTkZoH8w1weB/0Z3H66lSZb09/Va32dfuhs+PqmqbkgyJ27jvvDELw27hHvtynf+92GXIEn3ynRmnR0MrK6qywGSnEH3FMSVA31eCXywqm4AqKpfzXahGl0GvrRlm86ps93Z8GFUV7Phg6oAHg48PMn5/UO3Dp2tAiVJo222vkezDbAv8DRgD+A7SR5ZVTcOdkpyHHAcwIIFC2Zp15KkuWw6I5pr6J6auN4ebPhEROhGOUuq6o6qugL4T7rg2UBVnVpVi6tq8bx5fgFakrYE0wmapcC+SfZKsh3wIgYeptU7m240Q5Jd6E6lXT6LdUqSRtSUQdM/q/144FzgUuDMqlqR5G1Jjui7nQtcl2Ql8C3gr6vqulZFS5JGx7Su0VTVOcA5Y9reMvC6gNf3P5Ik3c07A0iSmjJoJElNGTSSpKYMGklSUwaNJKkpg0aS1JRBI0lqyqCRJDVl0EiSmjJoJElNGTSSpKYMGklSUwaNJKkpg0aS1JRBI0lqyqCRJDVl0EiSmjJoJElNGTSSpKYMGklSUwaNJKkpg0aS1JRBI0lqyqCRJDVl0EiSmjJoJElNGTSSpKYMGklSUwaNJKkpg0aS1JRBI0lqalpBk+TQJKuSrE5y4iT9npekkiyevRIlSaNsyqBJsjXwQeAwYBFwdJJF4/TbCXgt8IPZLlKSNLqmM6I5GFhdVZdX1e3AGcCR4/R7O/Au4NZZrE+SNOKmEzS7A2sGlq/u2+6W5CBgflV9aRZrkyRtBu71ZIAkWwHvBd4wjb7HJVmWZNnatWvv7a4lSSNgOkFzDTB/YHmPvm29nYADgG8nuRJ4ArBkvAkBVXVqVS2uqsXz5s3b+KolSSNjOkGzFNg3yV5JtgNeBCxZv7KqbqqqXapqYVUtBC4EjqiqZU0qliSNlCmDpqruBI4HzgUuBc6sqhVJ3pbkiNYFSpJG2zbT6VRV5wDnjGl7ywR9n3bvy5IkbS68M4AkqSmDRpLUlEEjSWrKoJEkNWXQSJKaMmgkSU0ZNJKkpgwaSVJTBo0kqSmDRpLUlEEjSWrKoJEkNWXQSJKaMmgkSU0ZNJKkpgwaSVJTBo0kqSmDRpLUlEEjSWrKoJEkNWXQSJKaMmgkSU0ZNJKkpgwaSVJTBo0kqSmDRpLUlEEjSWrKoJEkNWXQSJKaMmgkSU0ZNJKkpqYVNEkOTbIqyeokJ46z/vVJVia5JMk3kuw5+6VKkkbRlEGTZGvgg8BhwCLg6CSLxnT7d2BxVR0InAW8e7YLlSSNpumMaA4GVlfV5VV1O3AGcORgh6r6VlXd0i9eCOwxu2VKkkbVdIJmd2DNwPLVfdtEjgW+fG+KkiRtPraZzY0leSmwGHjqBOuPA44DWLBgwWzuWpI0R01nRHMNMH9geY++bQNJngG8GTiiqm4bb0NVdWpVLa6qxfPmzduYeiVJI2Y6QbMU2DfJXkm2A14ELBnskOQxwCl0IfOr2S9TkjSqpgyaqroTOB44F7gUOLOqViR5W5Ij+m7/C9gR+EyS5UmWTLA5SdIWZlrXaKrqHOCcMW1vGXj9jFmuS5K0mfDOAJKkpgwaSVJTBo0kqSmDRpLUlEEjSWrKoJEkNWXQSJKaMmgkSU0ZNJKkpgwaSVJTBo0kqSmDRpLUlEEjSWrKoJEkNWXQSJKaMmgkSU0ZNJKkpgwaSVJTBo0kqSmDRpLUlEEjSWrKoJEkNWXQSJKaMmgkSU0ZNJKkpgwaSVJTBo0kqSmDRpLUlEEjSWrKoJEkNWXQSJKamlbQJDk0yaokq5OcOM767ZN8ul//gyQLZ7tQSdJomjJokmwNfBA4DFgEHJ1k0ZhuxwI3VNU+wPuAd812oZKk0TSdEc3BwOqquryqbgfOAI4c0+dI4LT+9VnAIUkye2VKkkbVNtPoszuwZmD5auDxE/WpqjuT3AT8F+DXg52SHAcc1y/+JsmqjSl6DtmFMcc42+LYcLqa/i020d9hz02yF2kTm07QzJqqOhU4dVPus6Uky6pq8bDrkH8LaS6bzqmza4D5A8t79G3j9kmyDbAzcN1sFChJGm3TCZqlwL5J9kqyHfAiYMmYPkuAP+tfHwV8s6pq9sqUJI2qKU+d9ddcjgfOBbYG/rWqViR5G7CsqpYAHwU+kWQ1cD1dGG0JNpvTgJsB/xbSHBUHHpKklrwzgCSpKYNGktSUQSNJasqg0UhLcp8k+w27DkkTM2hmKMnDk3wjyU/65QOT/O2w69oSJXkOsBz4Sr/86CRjp95LGjKDZuY+DLwJuAOgqi5hy5nOPdecRHcvvhsBqmo5sNcwC5J0TwbNzN23qn44pu3OoVSiO6rqpjFtzteX5phNeq+zzcSvk+xN/4GW5Cjg2uGWtMVakeTFwNZJ9gVOAC4Yck2SxvALmzOU5GF030L/I+AG4ArgpVV15TDr2hIluS/wZuCZQOjuXvH2qrp1qIVJ2oBBs5GS3A/YqqrWDbsWSZrLDJppSvL6ydZX1Xs3VS1buiRfYJJrMVV1xCYsR9IUvEYzfTsNuwDd7T3DLkDS9DmikSQ15YhmhpLsABwLPALYYX17Vf350IraQvUzzd4BLGLDv8XDhlaUpHvwezQz9wngIcCzgPPonjjqhIDh+L/Ah+i+x/QnwMeB04dakaR78NTZDCX596p6TJJLqurAJNsC362qJwy7ti1Nkouq6rFJflxVjxxsG3Ztkv7AU2czd0f/741JDgB+ATx4iPVsyW5LshXw0/4psNcAOw65JkljeOps5k5N8kDg74AlwErg3cMtaYv1WuC+dHcEeCzwUuDlQ61I0j146kwjK8liujsD7Als2zdXVR04vKokjWXQzFCSB9D9r3khA6ceq+qEYdW0pUqyCvhr4MfA79e3V9VVQytK0j14jWbmzgEuZMyHm4ZibVX5/BlpjnNEM0NJLq6qg4ZdhyDJIcDRwDeA29a3V9W/Da0oSfdg0MxQkr8CfgN8kQ0/3K4fWlFbqCSnA/sDK/jD6LL88qw0txg0M5TkL4GT6Z7quP6XV34bfdNLsqqq9ht2HZIm5zWamXsDsE9V/XrYhYgLkiyqqpXDLkTSxAyamVsN3DLsIgTAE4DlSa6gO40ZnN4szTkGzcz9lu7D7VtseI3G6c2b3qHDLkDS1AyamTu7/9GQ+X0ZaTQ4GWAjJLkPsKCqVg27Fkma67zX2QwleQ6wHPhKv/zoJH5pUJImYNDM3EnAwXTTm6mq5YBTmyVpAgbNzN1RVTeNafNWNJI0AScDzNyKJC8Gtu4fJXwCcMGQa5KkOcsRzTQl+UT/8jLgEXRTmz8F3Ay8blh1SdJc56yzaUqyEngG8GW659NvwHudSdL4PHU2ff+H7i7BDwOWDbSH7p5nTgiQpHE4opmhJB+qqtcMuw5JGhUGjSSpKScDSJKaMmgkSU0ZNLqHJB9LctSw65C0eTBodK8lcfaipAkZNCMuyd8lWZXke0k+leSNSfZO8pUkFyX5bpL9+74fS/LPSS5Icvn6UUs6H+i383XgwQPbf2yS8/ptnZvkoX37t5O8P8ky4LXDOHZJo8H/iY6wJI8Dngc8CtgWuBi4CDgVeHVV/TTJ44F/AZ7ev+2hwJOB/YElwFnAc4H9gEXArsBK4F+TbAv8b+DIqlqb5IXAycCf99varqoWNz9QSSPNoBltTwI+X1W3Arcm+QKwA/BHwGeSrO+3/cB7zq6q3wMrk+zatz0F+FRV3QX8PMk3+/b9gAOAr/Xb2hq4dmBbn25wTJI2MwbN5mcr4MaqevQE628beJ0J+gyuX1FVT5xg/W9nWpykLY/XaEbb+cBzkuyQZEfg2cAtwBVJng93X3951BTb+Q7wwiRb99dg1t/LbRUwL8kT+21tm+QRTY5E0mbLoBlhVbWU7jrLJXQ3+/wxcBPwEuDYJD8CVgBHTrGpzwE/pbs283Hg+/32bweOAt7Vb2s53Wk5SZo2b0Ez4pLsWFW/SXJfupHJcVV18bDrkqT1vEYz+k5NsohuEsBphoykucYRjSSpKa/RSJKaMmgkSU0ZNJKkpgwaSVJTBo0kqSmDRpLU1P8H/AkYQBL+aQkAAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}